name: Deploy DAWSheet

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP project id (overrides secret GCP_PROJECT)'
        required: false
      spreadsheet_id:
        description: 'Spreadsheet id (overrides secret SHEET_ID)'
        required: false
      region:
        description: 'GCP region for Cloud Functions'
        required: false
        default: 'us-central1'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore Service Account key
        env:
          SA_KEY_B64: ${{ secrets.DAWSHEET_SA_KEY_B64 }}
          SA_KEY_JSON: ${{ secrets.DAWSHEET_SA_KEY }}
        run: |
          set -e
          # Prefer raw JSON secret, else use base64 encoded secret
          if [ -n "$SA_KEY_JSON" ]; then
            echo "$SA_KEY_JSON" > /tmp/dawsheet-sa.json
          elif [ -n "$SA_KEY_B64" ]; then
            echo "$SA_KEY_B64" | base64 --decode > /tmp/dawsheet-sa.json
          else
            echo "No service account key provided in secrets (DAWSHEET_SA_KEY or DAWSHEET_SA_KEY_B64)" >&2
            exit 1
          fi
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/dawsheet-sa.json

    - name: Authenticate gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
      service_account_key_file: /tmp/dawsheet-sa.json
      project_id: ${{ github.event.inputs.project_id || secrets.GCP_PROJECT || 'dawsheet' }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install clasp
        run: |
          npm install -g @google/clasp

    - name: Deploy Cloud Function: publishOutbox
        env:
      PROJECT_ID: ${{ github.event.inputs.project_id || secrets.GCP_PROJECT || 'dawsheet' }}
      SPREADSHEET_ID: ${{ github.event.inputs.spreadsheet_id || secrets.SHEET_ID || '1MMyTM8t269r_zEvvT_z3qZkx5GXhDydCG9KRc7lCDDM' }}
          SA_EMAIL: ${{ secrets.DAWSHEET_SA_EMAIL }}
          REGION: ${{ github.event.inputs.region || 'us-central1' }}
        run: |
          if [ -z "$PROJECT_ID" ]; then
            echo "Project ID not provided via workflow input or secret GCP_PROJECT" >&2
            exit 1
          fi
          if [ -z "$SPREADSHEET_ID" ]; then
            echo "Spreadsheet ID not provided via workflow input or secret SHEET_ID" >&2
            exit 1
          fi
          if [ -z "$SA_EMAIL" ]; then
            echo "Service account email not provided in secret DAWSHEET_SA_EMAIL" >&2
            exit 1
          fi

          gcloud functions deploy publishOutbox \
            --entry-point=handler \
            --runtime=node18 \
            --trigger-http \
            --region=$REGION \
            --service-account=$SA_EMAIL \
            --set-env-vars="SPREADSHEET_ID=$SPREADSHEET_ID,DELETE_AFTER_PUBLISH=true" \
            --project=$PROJECT_ID \
            --quiet

      - name: Push Apps Script with clasp (optional)
        env:
          CLASP_CREDS: /tmp/dawsheet-sa.json
        run: |
          # Attempt to push Apps Script project files. This uses the service account creds file.
          # The repo must contain a valid clasp project (clasp.json) and the service account must
          # have access to the Apps Script project.
          clasp login --creds /tmp/dawsheet-sa.json || true
          clasp push --force || true

      - name: Cleanup
        if: always()
        run: |
          rm -f /tmp/dawsheet-sa.json
