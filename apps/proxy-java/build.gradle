/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    // WebSocket server (required by WebSocketServerStub)
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    // Import the Google Cloud Libraries BOM to manage dependency versions
    implementation platform('com.google.cloud:libraries-bom:26.33.0')

    // Google Cloud Pub/Sub client library (version is managed by the BOM)
    implementation 'com.google.cloud:google-cloud-pubsub'

    // SLF4J for logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    runtimeOnly 'org.slf4j:slf4j-simple:2.0.7'


    // JavaOSC for OSC communication
    implementation 'com.illposed.osc:javaosc-core:0.8'

    // Spark Java for lightweight HTTP endpoints (used by ProxyApp)
    implementation 'com.sparkjava:spark-core:2.9.4'

    // JSON Schema validator (networknt) used by CommandEnvelopeValidator
    implementation 'com.networknt:json-schema-validator:1.0.76'

    // Jackson for JSON annotations and databinding used by generated models
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'

    // JUnit Jupiter for testing (Gradle 9 compatible)
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass = 'com.dawsheet.proxy.ProxyApp'
}

test {
    useJUnitPlatform()
}

// Lint flags for javac
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:unchecked','-Xlint:deprecation']
}

// Produce a fat JAR for easier distribution (Gradle 9 compatible)
tasks.register('fatJar', Jar) {
    archiveClassifier.set('all')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}

// Optional: npm-based Sass tasks (run only if Node/npm installed)
tasks.register('sassBuild') {
    group = 'build'
    description = 'Build CSS from Sass via npm (optional)'
    doLast {
        def npm = org.gradle.internal.jvm.Jvm.current().javaHome // noop, just to avoid unused import warnings
        try {
            exec { commandLine 'npm', 'run', 'sass:build' }
        } catch (Exception e) {
            println "Skipping Sass build (npm not available?): ${e.message}"
        }
    }
}
tasks.register('sassWatch') {
    group = 'build'
    description = 'Watch Sass via npm (optional)'
    doLast {
        try {
            exec { commandLine 'npm', 'run', 'sass:watch' }
        } catch (Exception e) {
            println "Sass watch failed: ${e.message}"
        }
    }
}

// Custom task to run the application and load environment variables from a .env file
task runWithEnv(type: JavaExec) {
    group = "application"
    description = "Runs the application with environment variables from .env file"
    
    mainClass = application.mainClass
    classpath = sourceSets.main.runtimeClasspath
    
    doFirst {
        def envFile = file(".env")
        if (envFile.exists()) {
            println "Loading environment variables from .env file"
            envFile.eachLine { line ->
                // Ignore comments and empty lines
                if (line.trim() && !line.startsWith('#')) {
                    if (line.contains('=')) {
                        def parts = line.split('=', 2)
                        def key = parts[0].trim()
                        def value = parts.length > 1 ? parts[1].trim() : ""
                        if (key) {
                            environment key, value
                        }
                    }
                }
            }
        } else {
            println "Warning: .env file not found. Relying on system environment variables."
        }
    }
}

// Custom task to run the Pub/Sub subscriber main (io.dawsheet.App) with .env loading
task runSubscriberWithEnv(type: JavaExec) {
    group = "application"
    description = "Runs the Pub/Sub subscriber (io.dawsheet.App) with environment variables from .env file"
    mainClass = 'io.dawsheet.App'
    classpath = sourceSets.main.runtimeClasspath

    doFirst {
        def envFile = file(".env")
        if (envFile.exists()) {
            println "Loading environment variables from .env file"
            envFile.eachLine { line ->
                if (line.trim() && !line.startsWith('#')) {
                    if (line.contains('=')) {
                        def parts = line.split('=', 2)
                        def key = parts[0].trim()
                        def value = parts.length > 1 ? parts[1].trim() : ""
                        if (key) {
                            environment key, value
                        }
                    }
                }
            }
        } else {
            println "Warning: .env file not found. Relying on system environment variables."
        }
    }
}

// Make the default 'run' task depend on our custom runner
run.dependsOn(runWithEnv)
// Disable the standard run task to avoid confusion
tasks.named('run').configure {
    enabled = false
}
// Set our custom task as the one to run by default
defaultTasks 'runWithEnv'
